{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"/home/vebjorng/chat-react/src/App.js\",\n    _s = $RefreshSig$(),\n    _s2 = $RefreshSig$(),\n    _s3 = $RefreshSig$();\n\n//import logo from './logo.svg';\nimport './App.css'; //import SignIn from \"./signin/signin\"\n\nimport React, { useEffect, useRef, useState } from 'react';\nimport firebase from 'firebase/app';\nimport 'firebase/firestore';\nimport 'firebase/auth';\nimport { useAuthState } from 'react-firebase-hooks/auth';\nimport { useCollectionData } from 'react-firebase-hooks/firestore';\nimport HeaderComponent from \"./components/header/header\";\nimport Layout from \"./components/layout/layout\";\nimport Card from \"./components/card/card\";\nimport { StyledLink, HeaderButton } from \"./components/header/headerStyles\";\nimport { Container, Section, DivChatArea, DivChatHeader, DivMessageSections, TextMessage, DivChatControls, Textarea, Button, DivUsers, DivName, DivPic, Image, DivUserInfo, SpanOnline, SpanOffline, SpanAway } from \"./styles/chatStyles\";\nimport { ContainerSignIn, CardButton, Form } from \"./components/card/cardStyles\";\nfirebase.initializeApp({\n  apiKey: \"AIzaSyCW1V-XomyFj_pfzJg1WVxeVWJB7b7ARZI\",\n  authDomain: \"chat-for-testapp.firebaseapp.com\",\n  databaseURL: \"https://chat-for-testapp.firebaseio.com\",\n  projectId: \"chat-for-testapp\",\n  storageBucket: \"chat-for-testapp.appspot.com\",\n  messagingSenderId: \"285672943459\",\n  appId: \"1:285672943459:web:6942bbd53520a9ccdaed56\",\n  measurementId: \"G-VS992604ML\"\n});\nconst auth = firebase.auth();\nconst firestore = firebase.firestore(); //const database = firebase.database()\n\nfunction App() {\n  _s();\n\n  const [user] = useAuthState(auth); // All information about the user is stored in user\n  // IF user is defined, show Chatroom etc, if not show SignIn\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: user ? /*#__PURE__*/_jsxDEV(Layout, {\n      children: [/*#__PURE__*/_jsxDEV(HeaderComponent, {\n        children: /*#__PURE__*/_jsxDEV(SignOut, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 69,\n          columnNumber: 15\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 67,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(ChatRoom, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 73,\n        columnNumber: 13\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 66,\n      columnNumber: 11\n    }, this) : /*#__PURE__*/_jsxDEV(SignIn, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 74,\n      columnNumber: 25\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 64,\n    columnNumber: 5\n  }, this);\n}\n\n_s(App, \"hP/7NvzUIXfxIpRVjMlmHSnysKo=\", false, function () {\n  return [useAuthState];\n});\n\n_c = App;\n\nconst SignIn = () => {\n  _s2();\n\n  /*const usersRef = firestore.collection('users');*/\n  const [isOnline, setIsOnline] = useState(false); // Used to check if user is online or not\n\n  const [user] = useAuthState(auth); //const usersRef = firebase.firestore().collection('users')\n\n  const signInWithGoogle = async () => {\n    await setIsOnline(true);\n    const provider = new firebase.auth.GoogleAuthProvider(); // Google authentication handled by Firebase\n\n    await auth.signInWithPopup(provider) // Triggers popup window\n    .then(user => {\n      const docRef = firebase.firestore().collection('users');\n      docRef.add({\n        //email: user.email,\n        isOnline\n      });\n    });\n    /*const usersRef = firebase.firestore().collection('users')\n     usersRef\n      .doc(uid)\n      .set({\n        online: true\n      }, {merge: true})*/\n\n    /*await usersRef.add({                             // Write new message to database. Added email for use as username\n      email,\n      createdAt: firebase.firestore.FieldValue.serverTimestamp(),\n      uid, \n      photoURL,\n      \n    });*/\n  };\n\n  return /*#__PURE__*/_jsxDEV(Layout, {\n    children: [/*#__PURE__*/_jsxDEV(HeaderComponent, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 119,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(ContainerSignIn, {\n      children: /*#__PURE__*/_jsxDEV(Card, {\n        children: /*#__PURE__*/_jsxDEV(CardButton, {\n          onClick: signInWithGoogle,\n          children: \"Sign in with Google\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 123,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 122,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 121,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 118,\n    columnNumber: 5\n  }, this);\n};\n\n_s2(SignIn, \"kqpHthk4sgTafhhdjEdFfB27w+U=\", false, function () {\n  return [useAuthState];\n});\n\n_c2 = SignIn;\n\nfunction SignOut() {\n  return auth.currentUser &&\n  /*#__PURE__*/\n  // If there is a currentUser, return a button that triggers auth.signOut()\n  _jsxDEV(StyledLink, {\n    onClick: () => auth.signOut(),\n    children: \"Logout\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 134,\n    columnNumber: 5\n  }, this);\n}\n\n_c3 = SignOut;\n\nfunction ChatRoom() {\n  _s3();\n\n  const [formValue, setFormValue] = useState(''); // To store message that is to be sent\n  //const [inputValue, setInputValue] = useState(false)\n\n  const [chatStarted, setChatStarted] = useState(false); // Used to initialize chat when <User /> is clicked\n\n  const [user] = useAuthState(auth); // Information about the user\n\n  const dummy = useRef(); // Reference to div under messages for use in scroll down\n\n  const messagesRef = firestore.collection('messages'); // Reference to collection in Firestore \n\n  const query = messagesRef.orderBy('createdAt').limit(40); // Make query for documents ordered by timestamp\n\n  const [messages] = useCollectionData(query, {\n    idField: 'id'\n  }); // Listen to updates in messages in realtime. \n  // Returns the messages from the database\n\n  console.log(messages);\n\n  const sendMessage = async e => {\n    e.preventDefault(); // Stop function from refreshing page on submit\n\n    const {\n      uid,\n      photoURL,\n      email\n    } = auth.currentUser; // currently logged in user\n\n    await messagesRef.add({\n      // Write new message to database. Added email for use as username\n      text: formValue,\n      createdAt: firebase.firestore.FieldValue.serverTimestamp(),\n      uid,\n      photoURL,\n      email\n    });\n    setFormValue(''); // Reset formvalue\n\n    dummy.current.scrollIntoView({\n      behavior: 'smooth'\n    }); // Automatically scroll down on sendMessage\n  }; // Put user info into a function to initialize chat when it is clicked\n\n\n  const User = props => {\n    const {\n      person,\n      onClick\n    } = props;\n    return /*#__PURE__*/_jsxDEV(DivName, {\n      onClick: () => onClick(person),\n      children: [/*#__PURE__*/_jsxDEV(DivPic, {\n        children: /*#__PURE__*/_jsxDEV(Image, {\n          src: \"https://a.slack-edge.com/66f9/img/avatars-teams/ava_0001-34.png\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 192,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 191,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(DivUserInfo, {\n        children: [/*#__PURE__*/_jsxDEV(\"span\", {\n          style: {\n            fontWeight: 500\n          },\n          children: person.email.split('@')[0]\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 195,\n          columnNumber: 15\n        }, this), /*#__PURE__*/_jsxDEV(SpanOnline, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 196,\n          columnNumber: 15\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 194,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 190,\n      columnNumber: 7\n    }, this);\n  };\n\n  const initChat = person => {\n    setChatStarted(true);\n    console.log(person);\n  };\n\n  const scrollToBottom = () => {\n    dummy.current.scrollIntoView({\n      behavior: 'smooth'\n    }); // Attempt at scrolling down on initialize chat\n  }; //debugger\n\n\n  useEffect(() => {\n    console.log(chatStarted);\n\n    if (chatStarted) {\n      scrollToBottom();\n    }\n  }, [messages]);\n  const person = messages ? messages.filter(message => message.email !== auth.currentUser.email)[0] : null; // Weakness: Depends on messages sent\n  // Initiating chat with chatStarted which is set to true by initChatwhen User is clicked\n\n  return /*#__PURE__*/_jsxDEV(Section, {\n    children: [/*#__PURE__*/_jsxDEV(DivUsers, {\n      children: person && /*#__PURE__*/_jsxDEV(User, {\n        person: person,\n        onClick: initChat\n      }, person.uid, false, {\n        fileName: _jsxFileName,\n        lineNumber: 232,\n        columnNumber: 27\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 231,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(DivChatArea, {\n      children: [/*#__PURE__*/_jsxDEV(DivChatHeader, {\n        children: chatStarted ? `Talking to ${person.email.split('@')[0]} ðŸ’¬ðŸ‘‹` : null\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 241,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(DivMessageSections, {\n        children: chatStarted ?\n        /*#__PURE__*/\n        //scrollToBottom()\n        _jsxDEV(\"div\", {\n          style: {\n            textAlign: \"left\"\n          },\n          children: /*#__PURE__*/_jsxDEV(TextMessage, {\n            children: [messages && messages.map(msg => /*#__PURE__*/_jsxDEV(ChatMessage, {\n              message: msg\n            }, msg.id, false, {\n              fileName: _jsxFileName,\n              lineNumber: 252,\n              columnNumber: 60\n            }, this)), \"  // return ChatMessage with given message\", /*#__PURE__*/_jsxDEV(\"div\", {\n              ref: dummy\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 253,\n              columnNumber: 27\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 251,\n            columnNumber: 25\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 250,\n          columnNumber: 22\n        }, this) : null\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 246,\n        columnNumber: 17\n      }, this), chatStarted ? /*#__PURE__*/_jsxDEV(DivChatControls, {\n        onSubmit: sendMessage,\n        children: [/*#__PURE__*/_jsxDEV(Textarea, {\n          placeholder: \"Happy chatting!\",\n          value: formValue,\n          onChange: e => setFormValue(e.target.value)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 262,\n          columnNumber: 23\n        }, this), /*#__PURE__*/_jsxDEV(Button, {\n          type: \"submit\",\n          disabled: formValue === '',\n          children: \"Send\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 267,\n          columnNumber: 23\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 261,\n        columnNumber: 22\n      }, this) : null]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 240,\n      columnNumber: 5\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 230,\n    columnNumber: 5\n  }, this);\n}\n\n_s3(ChatRoom, \"9mQUSedjOVvlydt4b8cwBkE0HHY=\", false, function () {\n  return [useAuthState, useCollectionData];\n});\n\n_c4 = ChatRoom;\n\nfunction ChatMessage(props) {\n  const {\n    text,\n    uid,\n    photoURL\n  } = props.message; //  works because <ChatMessage message={msg} />\n\n  const messageClass = uid === auth.currentUser.uid ? 'sent' : 'received'; // Distinguish between sent and recieved messages to style\n  // them accordingly\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: `message ${messageClass}`,\n    children: [/*#__PURE__*/_jsxDEV(\"img\", {\n      src: photoURL\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 302,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: text\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 303,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 301,\n    columnNumber: 5\n  }, this);\n}\n\n_c5 = ChatMessage;\nexport default App;\n\nvar _c, _c2, _c3, _c4, _c5;\n\n$RefreshReg$(_c, \"App\");\n$RefreshReg$(_c2, \"SignIn\");\n$RefreshReg$(_c3, \"SignOut\");\n$RefreshReg$(_c4, \"ChatRoom\");\n$RefreshReg$(_c5, \"ChatMessage\");","map":{"version":3,"sources":["/home/vebjorng/chat-react/src/App.js"],"names":["React","useEffect","useRef","useState","firebase","useAuthState","useCollectionData","HeaderComponent","Layout","Card","StyledLink","HeaderButton","Container","Section","DivChatArea","DivChatHeader","DivMessageSections","TextMessage","DivChatControls","Textarea","Button","DivUsers","DivName","DivPic","Image","DivUserInfo","SpanOnline","SpanOffline","SpanAway","ContainerSignIn","CardButton","Form","initializeApp","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","measurementId","auth","firestore","App","user","SignIn","isOnline","setIsOnline","signInWithGoogle","provider","GoogleAuthProvider","signInWithPopup","then","docRef","collection","add","SignOut","currentUser","signOut","ChatRoom","formValue","setFormValue","chatStarted","setChatStarted","dummy","messagesRef","query","orderBy","limit","messages","idField","console","log","sendMessage","e","preventDefault","uid","photoURL","email","text","createdAt","FieldValue","serverTimestamp","current","scrollIntoView","behavior","User","props","person","onClick","fontWeight","split","initChat","scrollToBottom","filter","message","textAlign","map","msg","id","target","value","ChatMessage","messageClass"],"mappings":";;;;;;;AAAA;AACA,OAAO,WAAP,C,CACA;;AAEA,OAAOA,KAAP,IAAgBC,SAAhB,EAA2BC,MAA3B,EAAmCC,QAAnC,QAAmD,OAAnD;AACA,OAAOC,QAAP,MAAqB,cAArB;AACA,OAAO,oBAAP;AACA,OAAO,eAAP;AAEA,SAASC,YAAT,QAA6B,2BAA7B;AACA,SAASC,iBAAT,QAAkC,gCAAlC;AAEA,OAAOC,eAAP,MAA4B,4BAA5B;AACA,OAAOC,MAAP,MAAmB,4BAAnB;AACA,OAAOC,IAAP,MAAiB,wBAAjB;AAEA,SAASC,UAAT,EAAqBC,YAArB,QAAyC,kCAAzC;AAEA,SAAUC,SAAV,EACUC,OADV,EAEUC,WAFV,EAGUC,aAHV,EAIUC,kBAJV,EAKUC,WALV,EAMUC,eANV,EAOUC,QAPV,EAQUC,MARV,EASUC,QATV,EAUUC,OAVV,EAWUC,MAXV,EAYUC,KAZV,EAaUC,WAbV,EAcUC,UAdV,EAeUC,WAfV,EAgBUC,QAhBV,QAgByB,qBAhBzB;AAkBA,SAAUC,eAAV,EACUC,UADV,EAEUC,IAFV,QAEsB,8BAFtB;AAIA3B,QAAQ,CAAC4B,aAAT,CAAuB;AACnBC,EAAAA,MAAM,EAAE,yCADW;AAEnBC,EAAAA,UAAU,EAAE,kCAFO;AAGnBC,EAAAA,WAAW,EAAE,yCAHM;AAInBC,EAAAA,SAAS,EAAE,kBAJQ;AAKnBC,EAAAA,aAAa,EAAE,8BALI;AAMnBC,EAAAA,iBAAiB,EAAE,cANA;AAOnBC,EAAAA,KAAK,EAAE,2CAPY;AAQnBC,EAAAA,aAAa,EAAE;AARI,CAAvB;AAYA,MAAMC,IAAI,GAAGrC,QAAQ,CAACqC,IAAT,EAAb;AACA,MAAMC,SAAS,GAAGtC,QAAQ,CAACsC,SAAT,EAAlB,C,CACA;;AAGA,SAASC,GAAT,GAAe;AAAA;;AAEb,QAAM,CAACC,IAAD,IAASvC,YAAY,CAACoC,IAAD,CAA3B,CAFa,CAEwB;AAErC;;AACA,sBACE;AAAK,IAAA,SAAS,EAAC,KAAf;AAAA,cACGG,IAAI,gBACD,QAAC,MAAD;AAAA,8BACE,QAAC,eAAD;AAAA,+BAEE,QAAC,OAAD;AAAA;AAAA;AAAA;AAAA;AAFF;AAAA;AAAA;AAAA;AAAA,cADF,eAOE,QAAC,QAAD;AAAA;AAAA;AAAA;AAAA,cAPF;AAAA;AAAA;AAAA;AAAA;AAAA,YADC,gBASa,QAAC,MAAD;AAAA;AAAA;AAAA;AAAA;AAVpB;AAAA;AAAA;AAAA;AAAA,UADF;AAeD;;GApBQD,G;UAEQtC,Y;;;KAFRsC,G;;AAsBT,MAAME,MAAM,GAAG,MAAM;AAAA;;AACnB;AACA,QAAM,CAACC,QAAD,EAAWC,WAAX,IAA0B5C,QAAQ,CAAC,KAAD,CAAxC,CAFmB,CAEoC;;AACvD,QAAM,CAACyC,IAAD,IAASvC,YAAY,CAACoC,IAAD,CAA3B,CAHmB,CAInB;;AAEA,QAAMO,gBAAgB,GAAG,YAAY;AAEnC,UAAMD,WAAW,CAAC,IAAD,CAAjB;AACA,UAAME,QAAQ,GAAG,IAAI7C,QAAQ,CAACqC,IAAT,CAAcS,kBAAlB,EAAjB,CAHmC,CAGuB;;AAE1D,UAAMT,IAAI,CAACU,eAAL,CAAqBF,QAArB,EAAgC;AAAhC,KACHG,IADG,CACER,IAAI,IAAI;AACZ,YAAMS,MAAM,GAAGjD,QAAQ,CAACsC,SAAT,GAAqBY,UAArB,CAAgC,OAAhC,CAAf;AAEAD,MAAAA,MAAM,CAACE,GAAP,CAAW;AACT;AACAT,QAAAA;AAFS,OAAX;AAKD,KATG,CAAN;AAUA;AACJ;AACA;AACA;AACA;AACA;;AAEI;AACJ;AACA;AACA;AACA;AACA;AACA;AACG,GA7BD;;AA+BA,sBACE,QAAC,MAAD;AAAA,4BACE,QAAC,eAAD;AAAA;AAAA;AAAA;AAAA,YADF,eAGE,QAAC,eAAD;AAAA,6BACE,QAAC,IAAD;AAAA,+BACI,QAAC,UAAD;AAAY,UAAA,OAAO,EAAEE,gBAArB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AADJ;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,YAHF;AAAA;AAAA;AAAA;AAAA;AAAA,UADF;AAWD,CAhDD;;IAAMH,M;UAGWxC,Y;;;MAHXwC,M;;AAmDN,SAASW,OAAT,GAAmB;AACjB,SAAOf,IAAI,CAACgB,WAAL;AAAA;AAAyB;AAE9B,UAAC,UAAD;AAAY,IAAA,OAAO,EAAE,MAAMhB,IAAI,CAACiB,OAAL,EAA3B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,UAFF;AAID;;MALQF,O;;AAQT,SAASG,QAAT,GAAqB;AAAA;;AACnB,QAAM,CAACC,SAAD,EAAYC,YAAZ,IAA4B1D,QAAQ,CAAC,EAAD,CAA1C,CADmB,CACoC;AACvD;;AACA,QAAM,CAAC2D,WAAD,EAAcC,cAAd,IAAgC5D,QAAQ,CAAC,KAAD,CAA9C,CAHmB,CAGoC;;AACvD,QAAM,CAACyC,IAAD,IAASvC,YAAY,CAACoC,IAAD,CAA3B,CAJmB,CAIoC;;AAEvD,QAAMuB,KAAK,GAAG9D,MAAM,EAApB,CANmB,CAMoC;;AAGvD,QAAM+D,WAAW,GAAGvB,SAAS,CAACY,UAAV,CAAqB,UAArB,CAApB,CATmB,CASwC;;AAE3D,QAAMY,KAAK,GAAGD,WAAW,CAACE,OAAZ,CAAoB,WAApB,EAAiCC,KAAjC,CAAuC,EAAvC,CAAd,CAXmB,CAWwC;;AAE3D,QAAM,CAACC,QAAD,IAAa/D,iBAAiB,CAAC4D,KAAD,EAAQ;AAACI,IAAAA,OAAO,EAAE;AAAV,GAAR,CAApC,CAbmB,CAa4C;AACA;;AAE/DC,EAAAA,OAAO,CAACC,GAAR,CAAYH,QAAZ;;AAKA,QAAMI,WAAW,GAAG,MAAMC,CAAN,IAAY;AAE9BA,IAAAA,CAAC,CAACC,cAAF,GAF8B,CAEsB;;AAEpD,UAAM;AAAEC,MAAAA,GAAF;AAAOC,MAAAA,QAAP;AAAiBC,MAAAA;AAAjB,QAA2BrC,IAAI,CAACgB,WAAtC,CAJ8B,CAIsB;;AAEpD,UAAMQ,WAAW,CAACV,GAAZ,CAAgB;AAA8B;AAClDwB,MAAAA,IAAI,EAAEnB,SADc;AAEpBoB,MAAAA,SAAS,EAAE5E,QAAQ,CAACsC,SAAT,CAAmBuC,UAAnB,CAA8BC,eAA9B,EAFS;AAGpBN,MAAAA,GAHoB;AAIpBC,MAAAA,QAJoB;AAKpBC,MAAAA;AALoB,KAAhB,CAAN;AAQAjB,IAAAA,YAAY,CAAC,EAAD,CAAZ,CAd8B,CAcV;;AAEpBG,IAAAA,KAAK,CAACmB,OAAN,CAAcC,cAAd,CAA6B;AAAEC,MAAAA,QAAQ,EAAE;AAAZ,KAA7B,EAhB8B,CAgB0B;AACzD,GAjBD,CArBmB,CA6CnB;;;AACA,QAAMC,IAAI,GAAIC,KAAD,IAAW;AAEtB,UAAM;AAAEC,MAAAA,MAAF;AAAUC,MAAAA;AAAV,QAAsBF,KAA5B;AAEA,wBACE,QAAC,OAAD;AAAS,MAAA,OAAO,EAAE,MAAME,OAAO,CAACD,MAAD,CAA/B;AAAA,8BACI,QAAC,MAAD;AAAA,+BACE,QAAC,KAAD;AAAO,UAAA,GAAG,EAAC;AAAX;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,cADJ,eAII,QAAC,WAAD;AAAA,gCACI;AAAM,UAAA,KAAK,EAAE;AAAEE,YAAAA,UAAU,EAAE;AAAd,WAAb;AAAA,oBAAmCF,MAAM,CAACV,KAAP,CAAaa,KAAb,CAAmB,GAAnB,EAAwB,CAAxB;AAAnC;AAAA;AAAA;AAAA;AAAA,gBADJ,eAEI,QAAC,UAAD;AAAA;AAAA;AAAA;AAAA,gBAFJ;AAAA;AAAA;AAAA;AAAA;AAAA,cAJJ;AAAA;AAAA;AAAA;AAAA;AAAA,YADF;AAYD,GAhBD;;AAoBA,QAAMC,QAAQ,GAAIJ,MAAD,IAAY;AAC3BzB,IAAAA,cAAc,CAAC,IAAD,CAAd;AACAQ,IAAAA,OAAO,CAACC,GAAR,CAAYgB,MAAZ;AACD,GAHD;;AAOA,QAAMK,cAAc,GAAG,MAAM;AAC3B7B,IAAAA,KAAK,CAACmB,OAAN,CAAcC,cAAd,CAA6B;AAAEC,MAAAA,QAAQ,EAAE;AAAZ,KAA7B,EAD2B,CAC8B;AACzD,GAFF,CAzEmB,CA6ElB;;;AACApF,EAAAA,SAAS,CAAC,MAAM;AACdsE,IAAAA,OAAO,CAACC,GAAR,CAAYV,WAAZ;;AACA,QAAIA,WAAJ,EAAiB;AACf+B,MAAAA,cAAc;AACf;AAEF,GANQ,EAMN,CAACxB,QAAD,CANM,CAAT;AASD,QAAMmB,MAAM,GAAGnB,QAAQ,GAAGA,QAAQ,CAACyB,MAAT,CAAgBC,OAAO,IAAIA,OAAO,CAACjB,KAAR,KAAkBrC,IAAI,CAACgB,WAAL,CAAiBqB,KAA9D,EAAqE,CAArE,CAAH,GAA6E,IAApG,CAvFmB,CAuFuF;AAE1G;;AACA,sBACE,QAAC,OAAD;AAAA,4BACE,QAAC,QAAD;AAAA,gBACUU,MAAM,iBAAI,QAAC,IAAD;AACM,QAAA,MAAM,EAAEA,MADd;AAEM,QAAA,OAAO,EAAEI;AAFf,SAAWJ,MAAM,CAACZ,GAAlB;AAAA;AAAA;AAAA;AAAA;AADpB;AAAA;AAAA;AAAA;AAAA,YADF,eAUA,QAAC,WAAD;AAAA,8BACQ,QAAC,aAAD;AAAA,kBAEId,WAAW,GAAI,cAAa0B,MAAM,CAACV,KAAP,CAAaa,KAAb,CAAmB,GAAnB,EAAwB,CAAxB,CAA2B,OAA5C,GAAqD;AAFpE;AAAA;AAAA;AAAA;AAAA,cADR,eAMY,QAAC,kBAAD;AAAA,kBAEI7B,WAAW;AAAA;AACX;AACC;AAAK,UAAA,KAAK,EAAE;AAAEkC,YAAAA,SAAS,EAAE;AAAb,WAAZ;AAAA,iCACG,QAAC,WAAD;AAAA,uBACG3B,QAAQ,IAAIA,QAAQ,CAAC4B,GAAT,CAAaC,GAAG,iBAAI,QAAC,WAAD;AAA0B,cAAA,OAAO,EAAEA;AAAnC,eAAkBA,GAAG,CAACC,EAAtB;AAAA;AAAA;AAAA;AAAA,oBAApB,CADf,6DAEE;AAAK,cAAA,GAAG,EAAEnC;AAAV;AAAA;AAAA;AAAA;AAAA,oBAFF;AAAA;AAAA;AAAA;AAAA;AAAA;AADH;AAAA;AAAA;AAAA;AAAA,gBAFU,GAQA;AAVf;AAAA;AAAA;AAAA;AAAA,cANZ,EAoBcF,WAAW,gBACR,QAAC,eAAD;AAAiB,QAAA,QAAQ,EAAEW,WAA3B;AAAA,gCACC,QAAC,QAAD;AACE,UAAA,WAAW,EAAC,iBADd;AAEE,UAAA,KAAK,EAAEb,SAFT;AAGE,UAAA,QAAQ,EAAGc,CAAD,IAAOb,YAAY,CAACa,CAAC,CAAC0B,MAAF,CAASC,KAAV;AAH/B;AAAA;AAAA;AAAA;AAAA,gBADD,eAMC,QAAC,MAAD;AAAQ,UAAA,IAAI,EAAC,QAAb;AAAsB,UAAA,QAAQ,EAAEzC,SAAS,KAAK,EAA9C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBAND;AAAA;AAAA;AAAA;AAAA;AAAA,cADQ,GAQc,IA5BvC;AAAA;AAAA;AAAA;AAAA;AAAA,YAVA;AAAA;AAAA;AAAA;AAAA;AAAA,UADF;AA+DD;;IAzJQD,Q;UAIQtD,Y,EASIC,iB;;;MAbZqD,Q;;AA2JT,SAAS2C,WAAT,CAAqBf,KAArB,EAA4B;AAC1B,QAAM;AAAER,IAAAA,IAAF;AAAQH,IAAAA,GAAR;AAAaC,IAAAA;AAAb,MAA0BU,KAAK,CAACQ,OAAtC,CAD0B,CACwB;;AAElD,QAAMQ,YAAY,GAAG3B,GAAG,KAAKnC,IAAI,CAACgB,WAAL,CAAiBmB,GAAzB,GAA+B,MAA/B,GAAwC,UAA7D,CAH0B,CAGgD;AACA;;AAC1E,sBAEE;AAAK,IAAA,SAAS,EAAG,WAAU2B,YAAa,EAAxC;AAAA,4BACE;AAAK,MAAA,GAAG,EAAE1B;AAAV;AAAA;AAAA;AAAA;AAAA,YADF,eAEE;AAAA,gBAAIE;AAAJ;AAAA;AAAA;AAAA;AAAA,YAFF;AAAA;AAAA;AAAA;AAAA;AAAA,UAFF;AAQD;;MAbQuB,W;AAeT,eAAe3D,GAAf","sourcesContent":["//import logo from './logo.svg';\nimport './App.css';\n//import SignIn from \"./signin/signin\"\n\nimport React, { useEffect, useRef, useState } from 'react';\nimport firebase from 'firebase/app';\nimport 'firebase/firestore';\nimport 'firebase/auth';\n\nimport { useAuthState } from 'react-firebase-hooks/auth';\nimport { useCollectionData } from 'react-firebase-hooks/firestore';\n\nimport HeaderComponent from \"./components/header/header\"\nimport Layout from \"./components/layout/layout\"\nimport Card from \"./components/card/card\"\n\nimport { StyledLink, HeaderButton } from \"./components/header/headerStyles\"\n\nimport {  Container, \n          Section,\n          DivChatArea,\n          DivChatHeader,\n          DivMessageSections,\n          TextMessage,\n          DivChatControls,\n          Textarea,\n          Button,\n          DivUsers, \n          DivName,\n          DivPic,\n          Image,\n          DivUserInfo,\n          SpanOnline,\n          SpanOffline,\n          SpanAway} from \"./styles/chatStyles\"\n\nimport {  ContainerSignIn,\n          CardButton,\n          Form } from \"./components/card/cardStyles\"\n\nfirebase.initializeApp({\n    apiKey: \"AIzaSyCW1V-XomyFj_pfzJg1WVxeVWJB7b7ARZI\",\n    authDomain: \"chat-for-testapp.firebaseapp.com\",\n    databaseURL: \"https://chat-for-testapp.firebaseio.com\",\n    projectId: \"chat-for-testapp\",\n    storageBucket: \"chat-for-testapp.appspot.com\",\n    messagingSenderId: \"285672943459\",\n    appId: \"1:285672943459:web:6942bbd53520a9ccdaed56\",\n    measurementId: \"G-VS992604ML\"\n})\n\n\nconst auth = firebase.auth()\nconst firestore = firebase.firestore()\n//const database = firebase.database()\n\n\nfunction App() {\n\n  const [user] = useAuthState(auth)    // All information about the user is stored in user\n\n  // IF user is defined, show Chatroom etc, if not show SignIn\n  return (\n    <div className=\"App\">\n      {user ? \n        ( <Layout>\n            <HeaderComponent>\n              {/*`Logged in as ${auth.currentUser.uid}`*/}\n              <SignOut />\n              {/*`Logged in as ${auth.currentUser.email.split('@')[0]}`*/}\n            </HeaderComponent>\n            \n            <ChatRoom />\n          </Layout>) : (<SignIn/>)\n      }  \n    </div>\n  );\n}\n\nconst SignIn = () => {\n  /*const usersRef = firestore.collection('users');*/\n  const [isOnline, setIsOnline] = useState(false)        // Used to check if user is online or not\n  const [user] = useAuthState(auth)\n  //const usersRef = firebase.firestore().collection('users')\n\n  const signInWithGoogle = async () => {\n    \n    await setIsOnline(true)\n    const provider = new firebase.auth.GoogleAuthProvider();  // Google authentication handled by Firebase\n\n    await auth.signInWithPopup(provider)  // Triggers popup window\n      .then(user => {\n        const docRef = firebase.firestore().collection('users')\n        \n        docRef.add({\n          //email: user.email,\n          isOnline\n        })\n\n      })\n    /*const usersRef = firebase.firestore().collection('users')\n\n    usersRef\n      .doc(uid)\n      .set({\n        online: true\n      }, {merge: true})*/\n    /*await usersRef.add({                             // Write new message to database. Added email for use as username\n      email,\n      createdAt: firebase.firestore.FieldValue.serverTimestamp(),\n      uid, \n      photoURL,\n      \n    });*/\n  }\n\n  return (\n    <Layout>\n      <HeaderComponent/>\n\n      <ContainerSignIn>\n        <Card>\n            <CardButton onClick={signInWithGoogle}>Sign in with Google</CardButton>\n        </Card>\n      </ContainerSignIn>\n    </Layout>\n  )\n}\n\n\nfunction SignOut() {\n  return auth.currentUser && (    // If there is a currentUser, return a button that triggers auth.signOut()\n\n    <StyledLink onClick={() => auth.signOut()}>Logout</StyledLink>\n  )\n}\n\n\nfunction ChatRoom () {\n  const [formValue, setFormValue] = useState('');        // To store message that is to be sent\n  //const [inputValue, setInputValue] = useState(false)\n  const [chatStarted, setChatStarted] = useState(false)  // Used to initialize chat when <User /> is clicked\n  const [user] = useAuthState(auth)                      // Information about the user\n\n  const dummy = useRef()                                 // Reference to div under messages for use in scroll down\n   \n\n  const messagesRef = firestore.collection('messages');      // Reference to collection in Firestore \n\n  const query = messagesRef.orderBy('createdAt').limit(40);  // Make query for documents ordered by timestamp\n\n  const [messages] = useCollectionData(query, {idField: 'id'});  // Listen to updates in messages in realtime. \n                                                                 // Returns the messages from the database\n\n  console.log(messages)\n\n\n\n\n  const sendMessage = async(e) => {\n\n    e.preventDefault();                                 // Stop function from refreshing page on submit\n\n    const { uid, photoURL, email } = auth.currentUser;  // currently logged in user\n\n    await messagesRef.add({                             // Write new message to database. Added email for use as username\n      text: formValue,\n      createdAt: firebase.firestore.FieldValue.serverTimestamp(),\n      uid, \n      photoURL,\n      email\n    });\n\n    setFormValue('');   // Reset formvalue\n\n    dummy.current.scrollIntoView({ behavior: 'smooth' });   // Automatically scroll down on sendMessage\n  }\n\n \n\n\n\n\n  // Put user info into a function to initialize chat when it is clicked\n  const User = (props) => {    \n\n    const { person, onClick } = props  \n\n    return (\n      <DivName onClick={() => onClick(person)}>\n          <DivPic >\n            <Image src=\"https://a.slack-edge.com/66f9/img/avatars-teams/ava_0001-34.png\"/>\n          </DivPic>\n          <DivUserInfo> \n              <span style={{ fontWeight: 500 }}>{person.email.split('@')[0]}</span>\n              <SpanOnline />\n              {/*<span>online</span>*/}\n          </DivUserInfo>\n      </DivName>\n    )\n  }\n\n\n\n  const initChat = (person) => {\n    setChatStarted(true)\n    console.log(person)\n  }\n\n  \n\n  const scrollToBottom = () => {\n    dummy.current.scrollIntoView({ behavior: 'smooth' })     // Attempt at scrolling down on initialize chat\n   }\n \n   //debugger\n   useEffect(() => {\n     console.log(chatStarted)\n     if (chatStarted) {\n       scrollToBottom();\n     }\n \n   }, [messages])\n\n  \n  const person = messages ? messages.filter(message => message.email !== auth.currentUser.email)[0] : null  // Weakness: Depends on messages sent\n\n  // Initiating chat with chatStarted which is set to true by initChatwhen User is clicked\n  return (\n    <Section>\n      <DivUsers>\n            {   person && <User key={person.uid} \n                                person={person}\n                                onClick={initChat}\n                          />\n            }\n    </DivUsers>\n\n    \n    <DivChatArea>\n            <DivChatHeader>    \n              {\n                chatStarted ? `Talking to ${person.email.split('@')[0]} ðŸ’¬ðŸ‘‹` : null\n              }\n            </DivChatHeader>\n                <DivMessageSections>\n                  {\n                    chatStarted ?\n                    //scrollToBottom()\n                    (<div style={{ textAlign: \"left\" }}>\n                        <TextMessage>\n                          {messages && messages.map(msg => <ChatMessage key={msg.id} message={msg} />)}  // return ChatMessage with given message\n                          <div ref={dummy}></div>\n                          {/*<div ref={messagesEndRef}></div>*/}\n                        </TextMessage>\n                    </div>) : (null)\n                  }\n                </DivMessageSections>\n                {\n                  chatStarted ? \n                    (<DivChatControls onSubmit={sendMessage}>\n                      <Textarea \n                        placeholder=\"Happy chatting!\"\n                        value={formValue} \n                        onChange={(e) => setFormValue(e.target.value)} \n                      />\n                      <Button type=\"submit\" disabled={formValue === ''}>Send</Button>\n                    </DivChatControls>) : (null)\n                }\n        </DivChatArea>\n      \n      {/*<div className=\"\">\n        <div>\n          {messages && messages.map(msg => <ChatMessage key={msg.id} message={msg} />)}\n\n          <div ref={dummy}></div>\n\n        </div>\n\n        <form onSubmit={sendMessage}> \n        \n          <input value={formValue} onChange={(e) => setFormValue(e.target.value)} />\n\n          <button type=\"submit\">Send</button>\n\n\n        </form>\n          </div>*/}\n    </Section>\n  ) \n\n}\n\nfunction ChatMessage(props) {\n  const { text, uid, photoURL } = props.message;    //  works because <ChatMessage message={msg} />\n\n  const messageClass = uid === auth.currentUser.uid ? 'sent' : 'received';  // Distinguish between sent and recieved messages to style\n                                                                            // them accordingly\n  return (  \n    \n    <div className={`message ${messageClass}`}>\n      <img src={photoURL} />\n      <p>{text}</p>\n    </div>\n\n  )\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}